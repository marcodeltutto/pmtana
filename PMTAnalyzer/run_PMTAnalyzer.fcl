#include "services_microboone.fcl"
#include "time_memory_tracker_microboone.fcl"

process_name : PMTAnalysis      #The process name must NOT contain any underscores

source : {
  module_type : RootInput
  maxEvents   : -1
}

services:
{
    scheduler:               { defaultExceptions: false }    # Make all uncaught exceptions fatal.
    # Load the service that manages root files for histograms.
    TFileService: { fileName: "PMTAnalyzer.root" }
    TimeTracker:             @local::microboone_time_tracker
    MemoryTracker:           @local::microboone_memory_tracker
    RandomNumberGenerator:   {} #ART native random number generator                                                                                          
    message:                 @local::microboone_message_services_prod_debug
    #FileCatalogMetadata:  @local::art_file_catalog_mc
    #LLMetaMaker: {Enable: true}
    @table::microboone_simulation_services
}

services.DetectorPropertiesService.NumberTimeSamples:        6400
services.DetectorPropertiesService.ReadOutWindowSize:        6400
services.DetectorClocksService.InheritClockConfig:           false
services.DetectorClocksService.TriggerOffsetTPC:             -0.400e3
services.DetectorClocksService.TrigModuleName:               "daq"

services.TimeTracker.printSummary: false
services.TimeTracker.dbOutput: {}

services.MemoryTracker.printSummaries: []
services.MemoryTracker.includeMallocInfo: false
services.MemoryTracker.dbOutput.filename: ""


outputs: {
  optionalout: { module_type: RootOutput
  	         fileName: "output_file.root"
                 WaveformLabel:    "saturation"
                 WaveformInstance: "OpdetBeamHighGain"
		 fastCloning: false }
}

physics: {

  producers : {
     # ParameterSets for zero or more producer modules
  }
  analyzers: {
     # ParameterSets for zero or more analyzer modules
     userana: { module_type: PMTAnalyzer
     	      	input_param: "optional" }
  }

  filters : {
     # ParameterSets for zero or more filter modules
  }

  #path0 : [  comma separated list of module labels of producer or filter modules  ]
  #path1 : [  comma separated list of module labels of producer or filter modules  ]

  #path2 : [  comma separated list of module labels of analyzer or output modules  ]
  #path3 : [  comma separated list of module labels of analyzer or output modules  ]

  #trigger_paths: [ path0, path1 ]
  #end_paths:     [ path2, path3 ]


  #here, just a shorthand: could have done ana: [ userana ] then end_paths: [ ana ]
  ana1:      [userana]
  end_paths: [ ana1 ]

}

